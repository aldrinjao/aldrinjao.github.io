{"version":3,"sources":["components/Optionsfield.js","components/Layerrow.js","components/Legend.js","components/Layerdetails.js","components/Panel.js","Map.js","App.js","index.js"],"names":["Optionsfield","basemaps","activeBaseMap","changeBaseMap","className","map","basemap","i","onChange","checked","name","type","Layerrow","id","setLayerlist","maplayers","Checkbox","color","onClick","event","stopPropagation","updateChecked","layer","target","title","style","transform","Legend","stops","legend","styling","console","log","stop","backgroundColor","toLocaleString","useStyles","makeStyles","root","padding","width","sliderLayer","display","alignItems","margin","justifyContent","sliderLabels","layerDesc","fontSize","lineHeight","options","description","property","Layerdetails","opacity","classes","useState","active","Panel","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","draggableId","draggableProps","Accordion","AccordionSummary","expandIcon","dragHandleProps","AccordionDetails","placeholder","mapboxgl","accessToken","Map","baseMaps","url","layerlist","isLoading","setLoading","mapContainerRef","useRef","setMap","setBaseMap","externalStyling","repaintMap","reverse","addLayer","column","paint","undefined","getLayer","removeLayer","useEffect","fetchData","container","current","center","zoom","maxZoom","minZoom","on","addControl","NavigationControl","remove","resetSources","setStyle","a","axios","get","response","data","res","Object","values","getSource","removeSource","addSource","minzoom","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4c3d046.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Optionsfield = ({basemaps, activeBaseMap, changeBaseMap}) => {\n\n  const renderOptions = (basemap, i) => {\n    return (\n      <label key={i} className=\"toggle-container\">\n        <input\n          onChange={() => changeBaseMap(i)}\n          checked={basemap.name === activeBaseMap.name}\n          name=\"toggle\"\n          type=\"radio\"\n        />\n        <div className=\"toggle txt-s py3 toggle--active-white\">\n          {basemap.name}\n        </div>\n      </label>\n    );\n  };\n  return (\n    <div className=\"toggle-group absolute top right mr60 mt12 border border--2 border--white bg-white shadow-darken10 z1\">\n      {basemaps.map(renderOptions)}\n      \n    </div>\n  );\n};\n\nexport default Optionsfield;\n","import React from \"react\";\nimport Checkbox from '@material-ui/core/Checkbox';\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n\n\nconst Layerrow = ({ id, name, checked, setLayerlist, maplayers}) => {\n\n    const value = '100';\n\n    const handleChange = (event) => {\n        event.stopPropagation();\n        //get the ordered & checked layers\n        const updateChecked = maplayers.map((layer) => {\n            const flag = event.target.checked;\n            const cboxname = event.target.name;\n\n            if (cboxname === layer.name) {\n                layer.checked = !layer.checked;\n            }\n            return layer;\n        }\n        );\n        \n        setLayerlist(updateChecked);\n    };\n\n\n    return (\n\n        <div>\n\n            <Checkbox\n                color=\"primary\"\n                id={id}\n                name={name}\n                checked={checked}\n                onClick={handleChange}\n                title=\"toggle layer\"\n                style={{\n                    transform: \"scale(0.8)\",\n                }} />\n            {name}\n\n\n        </div>\n    );\n\n};\n\n\n\nexport default Layerrow;\n","import React from \"react\";\n\nconst Legend = ({ stops, styling, name, legend }) => {\n\n  console.log(legend);\n  console.log(stops);\n  const renderLegendKeys = (stop, i) => {\n    return (\n      <div key={i} className=\"txt-m\">\n        <span\n          className=\"mr12 round-full w12 h12 inline-block align-middle\"\n          style={{ backgroundColor: stop[1] }}\n        />\n        <span>{`${stop[0].toLocaleString()}`}</span>\n\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"bg-white py6 px12 shadow-darken10 round z1\">\n        \n        {legend.map(renderLegendKeys)}\n      </div>\n    </>\n  );\n};\n\nexport default Legend;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { Slider } from \"@material-ui/core\";\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Legend from './Legend';\n\nimport OpacityIcon from '@material-ui/icons/Opacity';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n        padding: '5px 10px',\n        width: '100%'\n\n    },\n    sliderLayer: {\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        margin: 'auto',\n        justifyContent: 'space-between'\n    },\n    sliderLabels: {\n        width: '80%',\n        display: 'flex',\n        alignItems: 'center',\n\n    },\n    layerDesc: {\n        fontSize: '.8rem',\n        lineHeight: '1.2',\n        margin: '0px 0px 0px 0px'\n    }\n\n});\n\n\nconst options = [\n    {\n        name: 'Basemap1',\n        description: 'Estimated total population',\n        property: 'pop_est',\n        stops: [\n            [0, '#f8d5cc'],\n            [1000000, '#231266'],\n            [5000000, '#f1a8a5'],\n            [10000000, '#ee8f9a'],\n            [50000000, '#ec739b'],\n            [100000000, '#aaff12'],\n            [250000000, '#c44cc0'],\n            [500000000, '#9f43d7'],\n            [1000000000, '#6e40e6']\n        ]\n    },\n    {\n        name: 'Basemap2',\n        description: 'Estimate total GDP in millions of dollars',\n        property: 'gdp_md_est',\n        stops: [\n            [0, '#f8d5cc'],\n            [1000, '#f4bfb6'],\n            [5000, '#f1a8a5'],\n            [10000, '#ee8f9a'],\n            [50000, '#ec739b'],\n            [100000, '#dd5ca8'],\n            [250000, '#c44cc0'],\n            [5000000, '#9f43d7'],\n            [10000000, '#6e40e6']\n        ]\n    }\n];\n\n\nconst Layerdetails = ({ id, name, checked, setLayerlist, maplayers, description, opacity, styling }) => {\n    const classes = useStyles();\n    const [active, setActive] = useState(options[0]);\n\n    const handleChange = (name, value) => {\n        // get the layer opacity\n\n        const updateChecked = name = maplayers.map((layer) => {\n            const slidername = name;\n            if (slidername === layer.name) {\n                layer.opacity = value;\n\n            }\n            return layer;\n        }\n        );\n        setLayerlist(updateChecked);\n    };\n\n\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.layerDesc}>\n                {description}\n            </div>\n            {/* <div className={classes.sliderLayer} >\n                <div title=\"Opacity\">\n                    <OpacityIcon\n                        title=\"opacity\"\n                        style={{\n                            transform: \"scale(0.8)\"\n                        }}\n                    />\n                </div>\n\n                <div className={classes.sliderLabels}>\n                    <span>0</span>\n                    <Slider\n                        key={name}\n                        value={opacity}\n                        onChange={(event, value) => handleChange(name, value)}\n                        aria-labelledby=\"continuous-slider\"\n                        style={{\n                            transform: \"scale(0.8)\",\n                        }}\n                    />\n                    <span>100</span>\n                </div>\n\n\n            </div> */}\n\n                  <Legend active={active} stops={active.stops} legend={styling[name].legend}/>\n\n        </div>\n    );\n\n};\n\n\n\nexport default Layerdetails;\n","import React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Layerrow from \"./Layerrow\";\nimport Layerdetails from \"./Layerdetails\";\n\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n\nconst Panel = ({ maplayers, setLayerlist, styling}) => {\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        const items = Array.from(maplayers);\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        setLayerlist(items);\n\n        // redraw('from drag');\n\n\n    }\n\n    return (\n        <div>\n            <div id='layerpanel' className=\"bg-white absolute mt12 ml12 py12 px12 shadow-darken10 round z1 width400\">\n                <div id=\"paneltitle\">\n                    Layers\n                </div>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"layers\">\n                        {(provided) => (\n                            <ul  {...provided.droppableProps} ref={provided.innerRef} className='cardcontainer'>\n                                {maplayers.map(({ id, name, checked, opacity, description }, index) => {\n                                    return (\n                                        <Draggable key={id} draggableId={id} index={index}>\n                                            {(provided) => (\n                                                <li ref={provided.innerRef} {...provided.draggableProps} className='listitem'>\n\n                                                    <Accordion className=\"layeracc\">\n                                                        <AccordionSummary\n                                                            expandIcon={<ExpandMoreIcon />}\n                                                            aria-controls=\"panel1a-content\"\n                                                            id=\"panel1a-header\"\n                                                        >\n                                                            <div className=\"layerRow\" >\n                                                                <span className=\"material-icons handle\" title=\"drag to reorder\"  {...provided.dragHandleProps} >\n                                                                    drag_indicator\n                                                                </span>\n\n                                                                <Layerrow\n                                                                    id={id}\n                                                                    name={name}\n                                                                    checked={checked}\n                                                                    setLayerlist={setLayerlist}\n                                                                    maplayers={maplayers}\n                                                                />\n                                                            </div>\n\n                                                        </AccordionSummary>\n                                                        <AccordionDetails>\n                                                            <Layerdetails\n                                                                id={id}\n                                                                name={name}\n                                                                checked={checked}\n                                                                setLayerlist={setLayerlist}\n                                                                maplayers={maplayers}\n                                                                opacity={opacity}\n                                                                description={description}\n                                                                styling={styling}\n                                                            />\n\n                                                        </AccordionDetails>\n                                                    </Accordion>\n                                                </li>\n                                            )}\n                                        </Draggable>\n                                    )\n\n                                        ;\n                                })}\n                                {provided.placeholder}\n                            </ul>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n\n\n\n\n\n\n            </div>\n        </div>\n    );\n};\n\nexport default Panel;\n","import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from '!mapbox-gl';\nimport Optionsfield from './components/Optionsfield';\nimport './Map.css';\n\nimport axios from 'axios';\n\nimport externalStyling from './env/styling.json';\n\nimport externallayers from './env/layers.json';\nimport accessKey from './env/key.json';\n\nimport Panel from './components/Panel';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoicnVtcC1jb25mbGljdGFsZXJ0IiwiYSI6ImNrczRiMjhlbjFvN2gyeXJ3cWVmNGJueWoifQ.4PjwrtDVrh5i919c0hBCTA';\n\nconst Map = () => {\n\n  const baseMaps = [\n    {\n      name: 'Streets',\n      url: 'mapbox://styles/mapbox/streets-v11'\n    },\n    {\n      name: 'Satellite',\n      url: 'mapbox://styles/mapbox/satellite-v9'\n    },\n    {\n      name: 'Light',\n      url: 'mapbox://styles/mapbox/light-v10'\n    },\n    {\n      name: 'Dark',\n      url: 'mapbox://styles/mapbox/dark-v10'\n    }\n  ];\n\n\n\n  // const layers = Object.values(externallayers);\n\n  const [layerlist, setLayerlist] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n\n  const mapContainerRef = useRef(null);\n\n  const [map, setMap] = useState(null);\n\n  const [activeBaseMap, setBaseMap] = useState(baseMaps[0]);\n\n  const [styling, setStyling] = useState(externalStyling);\n\n\n\n\n  const repaintMap = () => {\n\n    const test = [...layerlist].reverse();\n\n    test.map(layer => {\n\n      if (layer.checked) {\n        map.addLayer({\n          'id': layer.name,\n          'type': layer.type,\n          'source': layer.name,\n          \"source-layer\": layer.column,\n          \"paint\": styling[layer.name].paint\n\n\n        });\n\n\n      } else {\n        if (map.getLayer(layer.name) !== undefined) {\n          map.removeLayer(layer.name);\n        }\n\n      }\n    });\n  }\n\n\n\n  // Initialize map when component mounts\n  useEffect(() => {\n\n    fetchData();\n\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: activeBaseMap.url,\n      center: [124, 8],\n      zoom: 7,\n      maxZoom: 15,\n      minZoom: 7\n\n    });\n\n    map.on('load', () => { setMap(map) });\n    map.addControl(new mapboxgl.NavigationControl());\n\n    // Clean up on unmount\n    return () => map.remove();\n  }, []);\n\n\n\n\n  useEffect(() => {\n    if (map) {\n      resetSources();\n      repaintMap();\n      setMap(map);\n\n    }\n\n  }, [layerlist]);\n\n\n  useEffect(() => {\n    if (map) {\n      map.setStyle(activeBaseMap.url);\n      map.on('style.load', () => {\n        resetSources();\n        repaintMap();\n      })\n\n    }\n\n  }, [activeBaseMap]);\n\n\n  const changeBaseMap = i => {\n    setBaseMap(baseMaps[i]);\n\n  };\n\n\n  const fetchData = async () => {\n    let response = await axios.get('data.json')\n    let res = await response.data;\n    setLayerlist(Object.values(res));\n    setLoading(false);\n  }\n\n\n  const resetSources = () => {\n    layerlist.map(layer => {\n\n      if (map.getLayer(layer.name) !== undefined) {\n        map.removeLayer(layer.name);\n\n      }\n\n      if (map.getSource(layer.name)) {\n        map.removeSource(layer.name);\n      }\n\n      map.addSource(layer.name, {\n        type: 'vector',\n        url: 'mapbox://' + layer.url,\n        minzoom: 2\n      });\n\n\n    });\n\n  }\n\n  if (isLoading) {\n    return (\n      <div>\n\n        <div ref={mapContainerRef} className='map-container' />\n\n      </div>\n    );\n  }\n\n\n  return (\n    <div>\n      <div ref={mapContainerRef} className='map-container' />\n      <Optionsfield\n        basemaps={baseMaps}\n        activeBaseMap={activeBaseMap}\n        changeBaseMap={changeBaseMap}\n      />\n      <Panel\n        maplayers={layerlist}\n        setLayerlist={setLayerlist}\n        styling={styling}\n      />\n    </div>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport Map from './Map';\n\nfunction App() {\n  return (\n    <div>\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}